---

################################################################################### CHANGE ME

postfix_ssl_cert_country: US
postfix_ssl_cert_state: Ohio
postfix_ssl_cert_locality: Columbus

################################################################################### SANE DEFAULTS

# SSL

postfix_ssl_cert_common_name: "{{ ansible_fqdn }}"
postfix_ssl_cert_subj_string: "/C={{ postfix_ssl_cert_country }}/ST={{ postfix_ssl_cert_state }}/L={{ postfix_ssl_cert_locality }}/CN={{ postfix_ssl_cert_common_name }}"
postfix_ssl_cert_days: 3650

postfix_tls_cert_file:  /etc/ssl/private/mailserver.pem
postfix_tls_key_file: /etc/ssl/private/mailserver.key
postfix_tls_CAfile: /etc/ssl/certs/ca-bundle.trust.crt

# SPF

#  Amount of debugging information logged.  0 logs no debugging messages
#  5 includes all debug messages.
postfix_spf_debugLevel: 1

#  If set to 0, no messages are rejected by SPF.  This allows you to see the 
#  potential impact of SPF checking in your mail logs without rejecting mail.
postfix_spf_defaultSeedOnly: 1

#  HELO check rejection policy. Options are:
#  HELO_reject = SPF_Not_Pass (default) - Reject if result not Pass/None/Tempfail.
#  HELO_reject = Softfail - Reject if result Softfail and Fail
#  HELO_reject = Fail - Reject on HELO Fail
#  HELO_reject = Null - Only reject HELO Fail for Null sender (SPF Classic)
#  HELO_reject = False - Never reject/defer on HELO, append header only. 
#  HELO_reject = No_Check - Never check HELO.
postfix_spf_HELO_reject: SPF_Not_Pass

#  HELO pass restriction policy.
#  HELO_pass_restriction = helo_passed_spf - Apply the given restriction when
#    the HELO checking result is Pass.  The given restriction must be an
#    action as defined for a Postfix SMTP server access table access(5).
#HELO_pass_restriction

#  Mail From rejection policy.  Options are:
#  Mail_From_reject = SPF_Not_Pass - Reject if result not Pass/None/Tempfail.
#  Mail_From_reject = Softfail - Reject if result Softfail and Fail
#  Mail_From_reject = Fail - Reject on Mail From Fail (default)
#  Mail_From_reject = False - Never reject/defer on Mail From, append header only
#  Mail_From_reject = No_Check - Never check Mail From/Return Path.
postfix_spf_Mail_From_reject: Fail

#  Reject only from domains that send no mail. Options are:
#  No_Mail = False - Normal SPF record processing (default)
#  No_Mail = True - Only reject for "v=spf1 -all" records

#  Mail From pass restriction policy.
#  Mail_From_pass_restriction = mfrom_passed_spf - Apply the given
#    restriction when the Mail From checking result is Pass.  The given 
#    restriction must be an action as defined for a Postfix SMTP server
#    access table access(5).
#Mail_From_pass_restriction

#  Reject mail for Netural/Softfail results for these domains.
#  Recevier policy option to reject mail from certain domains when SPF is not
#  Pass/None even if their SPF record does not produce a Fail result.  This
#  Option does not change the effect of PermError_reject or TempError_Defer
#  Reject_Not_Pass_Domains = aol.com,hotmail.com

#  Policy for rejecting due to SPF PermError.  Options are:
#  PermError_reject = True
#  PermError_reject = False
postfix_spf_PermError_reject: False

#  Policy for deferring messages due to SPF TempError.  Options are:
#  TempError_Defer = True
#  TempError_Defer = False
postfix_spf_TempError_Defer: False

#  Prospective SPF checking - Check to see if mail sent from the defined IP
#  address would pass.
#  Prospective = 192.168.0.4

#  Do not check SPF for localhost addresses - add to skip addresses to 
#  skip SPF for internal networks if desired. Defaults are standard IPv4 and
#  IPv6 localhost addresses.
postfix_spf_skip_addresses: 127.0.0.0/8,::ffff:127.0.0.0/104,::1

#  Whitelist: CIDR Notation list of IP addresses not to check SPF for.
#  Example (default is no whitelist):
#  Whitelist = 192.168.0.0/31,192.168.1.12

#  Domain_Whitelist: List of domains whose sending IPs (defined by passing
#  their SPF check should be whitelisted from SPF.
#  Example (default is no domain whitelist):
#  Domain_Whitelist = pobox.com,trustedforwarder.org

# Domain_Whitelist_PTR: List of domains to whitelist against SPF checks base
# on PTR match.
# Example (default is no PTR whitelist)
# Domain_Whitelist_PTR = yahoo.com

# Type of header to insert to document SPF result. Can be Received-SPF (SPF)
# or Authentication Results (AR). It cannot be both.
# Examples: (default is Received-SPF):
# Header_Type = AR
# Header_Type = SPF

# Every Authentication-Results header field has an authentication identifier
# field ('Authserv_Id'). This is similar in syntax to a fully-qualified domain
# name. See policyd-spf.conf.5 and RFC 7001 paragraph 2.4 for details.
# Default is None.  Authserv-Id must be provided if Header_Type 'AR' is used.
# Authserv_Id = mx.example.com

# RFC 7208 recommends an elapsed time limit for SPF checks of at least 20
# seconds.  Lookup_Time allows the maximum time (seconds) to be adjusted.  20
# seconds is the default.
# Lookup_Time = 20

# RFC 7208 adds a new processing limit called "void lookup limit" (See section
# 4.6.4).  Default is 2, but it can be adjusted.  Only relevant for pyspf
# 2.0.9 and later.  Ignored for earlier releases.
# Void_Limit = 2


############################################################################### OpenDKIM

postfix_opendkim_AutoRestart: Yes
postfix_opendkim_AutoRestartRate: 10/1h
postfix_opendkim_LogWhy: Yes
postfix_opendkim_Syslog: Yes
postfix_opendkim_SyslogSuccess: Yes
postfix_opendkim_Mode: sv
postfix_opendkim_Canonicalization: relaxed/simple
postfix_opendkim_ExternalIgnoreList: "refile:/etc/opendkim/TrustedHosts"
postfix_opendkim_InternalHosts: "refile:/etc/opendkim/TrustedHosts"
postfix_opendkim_KeyTable: "refile:/etc/opendkim/KeyTable"
postfix_opendkim_SigningTable: "refile:/etc/opendkim/SigningTable"
postfix_opendkim_SignatureAlgorithm: rsa-sha256
postfix_opendkim_Socket: unix:/var/run/opendkim/opendkim.socket
postfix_opendkim_PidFile: /var/run/opendkim/opendkim.pid
postfix_opendkim_UMask: 022
postfix_opendkim_UserID: opendkim:opendkim
postfix_opendkim_TemporaryDirectory: /var/tmp


############################################################################### OpenDMARC

postfix_opendmarc_AuthservID: "{{ ansible_fqdn }}"

##  Socket socketspec -
##  Specifies the socket that should be established by the filter to receive
##  connections from sendmail(8) in order to provide service.  socketspec is
##  in one of two forms: local:path, which creates a UNIX domain socket at
##  the specified path, or inet:port[@host] or inet6:port[@host] which creates
##  a TCP socket on the specified port for the appropriate protocol family.
##  If the host is not given as either a hostname or an IP address, the
##  socket will be listening on all interfaces.  This option is mandatory
##  either in the configuration file or on the command line.  If an IP
##  address is used, it must be enclosed in square brackets.
##  default: (none)
postfix_opendmarc_Socket: local:/var/run/opendmarc/opendmarc.socket

##  PublicSuffixList path -
##  Specifies the path to a file that contains top-level domains (TLDs) that
##  will be used to compute the Organizational Domain for a given domain name,
##  as described in the DMARC specification.  If not provided, the filter will
##  not be able to determine the Organizational Domain and only the presented
##  domain will be evaluated.
##  default: (none)
postfix_opendmarc_PublicSuffixList: /etc/opendmarc/effective_tld_names.dat

##  HistoryFile path -
##  If set, specifies the location of a text file to which records are written
##  that can be used to generate DMARC aggregate reports.  Records are groups
##  of rows containing information about a single received message, and
##  include all relevant information needed to generate a DMARC aggregate
##  report.  It is expected that this will not be used in its raw form, but
##  rather periodically imported into a relational database from which the
##  aggregate reports can be extracted by a tool such as opendmarc-import(8).
##  default: (none)
postfix_opendmarc_HistoryFile: /var/spool/opendmarc/opendmarc.dat
